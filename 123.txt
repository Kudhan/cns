#ceaser cipher

#include <stdio.h>
#include <string.h>

// Function to encrypt the text using Caesar Cipher
void encrypt(char *text, int shift) {
    for (int i = 0; text[i] != '\0'; i++) {
        // Encrypt uppercase letters
        if (text[i] >= 'A' && text[i] <= 'Z') {
            text[i] = ((text[i] - 'A' + shift) % 26) + 'A';
        }
        // Encrypt lowercase letters
        else if (text[i] >= 'a' && text[i] <= 'z') {
            text[i] = ((text[i] - 'a' + shift) % 26) + 'a';
        }
    }
}

// Function to decrypt the text using Caesar Cipher
void decrypt(char *text, int shift) {
    for (int i = 0; text[i] != '\0'; i++) {
        // Decrypt uppercase letters
        if (text[i] >= 'A' && text[i] <= 'Z') {
            text[i] = ((text[i] - 'A' - shift + 26) % 26) + 'A';
        }
        // Decrypt lowercase letters
        else if (text[i] >= 'a' && text[i] <= 'z') {
            text[i] = ((text[i] - 'a' - shift + 26) % 26) + 'a';
        }
    }
}

int main() {
    char text[100];
    int shift;

    // Input the text and the shift value
    printf("Enter a string: ");
    fgets(text, sizeof(text), stdin);
    text[strcspn(text, "\n")] = '\0';  // Remove the newline character from input

    printf("Enter shift value: ");
    scanf("%d", &shift);

    // Encrypt the text
    encrypt(text, shift);
    printf("Encrypted text: %s\n", text);

    // Decrypt the text
    decrypt(text, shift);
    printf("Decrypted text: %s\n", text);

    return 0;
}

#hill cypher
#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to convert a character to its numerical value (A=0, B=1, ..., Z=25)
int charToInt(char c) {
    return toupper(c) - 'A';
}

// Function to convert a number back to a character
char intToChar(int n) {
    return (n % 26) + 'A';
}

int main() {
    // 2x2 key matrix
    int key[2][2] = {
        {3, 3},
        {2, 5}
    };

    char plaintext[3]; // 2 letters + null terminator
    char ciphertext[3];
    int ptVec[2];
    int ctVec[2];

    // Get plaintext input
    printf("Enter 2-letter plaintext (A-Z): ");
    scanf("%2s", plaintext);

    // Convert letters to numbers
    ptVec[0] = charToInt(plaintext[0]);
    ptVec[1] = charToInt(plaintext[1]);

    // Matrix multiplication: key × ptVec mod 26
    ctVec[0] = (key[0][0] * ptVec[0] + key[0][1] * ptVec[1]) % 26;
    ctVec[1] = (key[1][0] * ptVec[0] + key[1][1] * ptVec[1]) % 26;

    // Convert numbers back to letters
    ciphertext[0] = intToChar(ctVec[0]);
    ciphertext[1] = intToChar(ctVec[1]);
    ciphertext[2] = '\0';

    // Output the encrypted message
    printf("Encrypted ciphertext: %s\n", ciphertext);

    return 0;
}




#vignere cypher:

#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to encrypt the plaintext using Vigenère cipher
void encryptVigenere(char *message, char *key, char *encryptedMessage) {
    int messageLength = strlen(message);   // Length of the message
    int keyLength = strlen(key);           // Length of the keyword
    int keyIndex = 0;                      // To track the position in the keyword

    // Loop through each character in the message
    for (int i = 0; i < messageLength; i++) {
        char currentChar = message[i];     // Get current character from message
        
        // If it's an alphabetic character, encrypt it
        if (isalpha(currentChar)) {
            // Ensure the character and the key character are uppercase
            currentChar = toupper(currentChar);
            char keyChar = toupper(key[keyIndex % keyLength]);

            // Perform the Vigenère cipher shift (P + K) % 26
            encryptedMessage[i] = ((currentChar - 'A') + (keyChar - 'A')) % 26 + 'A';

            // Move to the next character in the keyword
            keyIndex++;
        } else {
            // Non-alphabetic characters are copied directly
            encryptedMessage[i] = currentChar;
        }
    }

    encryptedMessage[messageLength] = '\0';  // Null-terminate the string
}

int main() {
    char message[100], key[100], encryptedMessage[100];

    // Get the plaintext message from the user
    printf("Enter the message to encrypt (A-Z only): ");
    scanf("%s", message);

    // Get the keyword for encryption
    printf("Enter the keyword (A-Z only): ");
    scanf("%s", key);

    // Encrypt the message using the Vigenère cipher
    encryptVigenere(message, key, encryptedMessage);

    // Display the encrypted message
    printf("Encrypted message: %s\n", encryptedMessage);

    return 0;
}



#railfence


#include <stdio.h>
#include <string.h>

int main() {
    char message[100], rail1[100], rail2[100];
    int i, len, r1 = 0, r2 = 0;

    printf("Enter a message (no spaces): ");
    scanf("%s", message);

    len = strlen(message);

    // Write characters in zigzag: even index → rail1, odd index → rail2
    for (i = 0; i < len; i++) {
        if (i % 2 == 0)
            rail1[r1++] = message[i];
        else
            rail2[r2++] = message[i];
    }

    // Null terminate both rails
    rail1[r1] = '\0';
    rail2[r2] = '\0';

    // Print the encrypted message (rail1 followed by rail2)
    printf("Encrypted message: %s%s\n", rail1, rail2);

    return 0;
}
















#diffe hellman key exchange
#include <stdio.h>
#include <math.h>
int main() {
    long int p, g;
    long int a, b;
    long int A, B;
    long int keyA, keyB;

    printf("Enter a prime number (p): ");
    scanf("%ld", &p);

    printf("Enter a primitive root modulo p (g): ");
    scanf("%ld", &g);

    printf("Host A, enter private key (a): ");
    scanf("%ld", &a);

    printf("Host B, enter private key (b): ");
    scanf("%ld", &b);

    A = ((long int)pow(g, a)) % p;
    B = ((long int)pow(g, b)) % p;

    printf("\nHost A sends public key: %ld", A);
    printf("\nHost B sends public key: %ld", B);

    keyA = ((long int)pow(B, a)) % p;
    keyB = ((long int)pow(A, b)) % p;

    printf("\n\nHost A's shared secret key: %ld", keyA);
    printf("\nHost B's shared secret key: %ld", keyB);

    if (keyA == keyB) {
        printf("\n Shared key successfully generated!\n");
    } else {
        printf("\n Shared key mismatch!\n");
    }

    return 0;
}






#hamc,hashlib
import hmac
import hashlib

def compute_digest(filename, key):
    with open(filename, 'rb') as file:
        file_data = file.read()
    return hmac.new(key.encode(), file_data, hashlib.sha256).hexdigest()

filename = input("Enter filename: ")
key = input("Enter secret key: ")

digest = compute_digest(filename, key)
print("Generated HMAC:", digest)

verify = input("Enter HMAC to validate: ")
if hmac.compare_digest(digest, verify):
    print("HMAC is valid. Message integrity verified.")
else:
    print(" HMAC is invalid. Message might be tampered.")







#password generation
import secrets
import string

def generate_password(length):
    if length < 8:
        print("Password should be at least 8 characters long for strength.")
        return None
    letters = string.ascii_letters
    digits = string.digits
    symbols = string.punctuation
    all_chars = letters + digits + symbols
    password = ''.join(secrets.choice(all_chars) for _ in range(length))
    return password

length = int(input("Enter the length of the password (minimum 8): "))
password = generate_password(length)

if password:
    print("Generated Strong Password:", password)





